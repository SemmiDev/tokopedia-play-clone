openapi: 3.0.0
info:
  title: Tokopedia Play Clone
  version: 1.0.0
  description: Tokopedia Play Clone API Documentation
  contact:
    name: Sammi Aldhi Yanto
    email: sammidev4@gmail.com
paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '201':
          description: User created
        '400':
          description: Bad Request
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
  /api/auth/login:
    post:
      summary: User login
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  username:
                    type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal Server Error
  /api/users:
    put:
      summary: Update user profile
      tags:
        - Users
      security:
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
        '400':
          description: Bad Request
        '404':
          description: User not found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
  /api/auth/logout:
    post:
      summary: User logout
      tags:
        - Users
      security:
        - apiKeyAuth: []
      responses:
        '200':
          description: Logout successful
        '500':
          description: Internal Server Error

  /api/videos:
    post:
      summary: "Create a new video"
      tags:
        - Videos
      security:
        - apiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                youtube_link:
                  type: string
                title:
                  type: string
              required:
                - youtube_link
                - title
      responses:
        201:
          description: "Video created successfully"
        400:
          description: "Bad request, missing or invalid data"
        500:
          description: "Failed to create video"
  /api/videos/{id}:
    get:
      summary: "Get video by ID"
      tags:
        - Videos
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: "Video ID"
      responses:
        200:
          description: "Success, video found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Video"
        404:
          description: "Video not found"
        500:
          description: "Failed to fetch video"

    put:
      summary: "Update a video"
      tags:
        - Videos
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: "Video ID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                youtube_link:
                  type: string
                title:
                  type: string
              required:
                - youtube_link
      responses:
        200:
          description: "Video updated successfully"
        400:
          description: "Bad request, missing or invalid data"
        500:
          description: "Failed to update video"

    delete:
      summary: "Delete a video"
      tags:
        - Videos
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: "Video ID"
      responses:
        200:
          description: "Video deleted successfully"
        404:
          description: "Video not found"
        500:
          description: "Failed to delete video"

  /api/products:
    post:
      summary: Create a new product
      tags:
        - Products
      security:
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
        '400':
          description: Bad request, missing or invalid data
        '404':
          description: Video not found
        '500':
          description: Failed to create product

    get:
      summary: Get all products
      tags:
        - Products
      security:
        - apiKeyAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Failed to fetch products

  /api/products/{id}:
    get:
      summary: Get product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID
      responses:
        '200':
          description: Success, product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '500':
          description: Failed to fetch product

    put:
      summary: Update a product
      tags:
        - Products
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
        '400':
          description: Bad request, missing or invalid data
        '404':
          description: Product not found
        '500':
          description: Failed to update product

    delete:
      summary: Delete a product
      tags:
        - Products
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found
        '500':
          description: Failed to delete product

  /api/comments:
    post:
      summary: Create a new comment
      tags:
        - Comments
      security:
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment created successfully
        '400':
          description: Bad request, missing or invalid data
        '500':
          description: Failed to create comment

  /api/comments/{id}:
    get:
      summary: Get comments by video ID
      tags:
        - Comments
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Video ID
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request, invalid video ID
        '404':
          description: Video not found
        '500':
          description: Failed to fetch comments


components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    Video:
      type: object
      properties:
        _id:
          type: string
        user_id:
          type: string
        title:
          type: string
        youtube_link:
          type: string
        thumbnail:
          type: string
      required:
        - user_id
        - title
        - youtube_link
    Product:
      type: object
      properties:
        video_id:
          type: string
        name:
          type: string
        price:
          type: number
        product_link:
          type: string
        timestamp:
          type: string
          format: date-time
      required:
        - video_id
        - name
        - price
        - product_link
    Comment:
      type: object
      properties:
        video_id:
          type: string
        text:
          type: string
      required:
        - video_id
        - text